0.使用场景
  不需要返回结果；不实时

1.项目为什么引入MQ？
	项目间需要通信。不需要返回结果；时效性要求不高
MQ好处
  	解耦、异步、削峰

2.如何处理消息丢失？
   确认机制+重试（缺点是MQ吞吐量会下降）
  生产者到MQ丢失：生产者设置成confirm（确认）模式
  MQ自己丢了：    持久化
  消费者丢了：    接收方确认机制

3.如何保证消息不被重复消费？
   消息被消费后，就记录下来（通过唯一标识记录到数据库、Redis等）。再次消费时，先查询记录，有记录就丢掉消息
   
4.如何保证消息的顺序性？
   建一个专用处理有序消息的队列，保证队列内的消息FIFO，只有一个消费者处理这个队列消息

5.消息积压
   一般是consumer性能问题或者consumer挂了
	性能问题：1)优化consumer性能2)扩容consumer
   	挂了：先修复consumer，恢复消费速度；临时把消费者改成多线程的或者增加消费者数量，提升消费速度